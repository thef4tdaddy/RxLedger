#!/usr/bin/env bash

# Colors
GREEN="\033[0;32m"
RED="\033[0;31m"
YELLOW="\033[1;33m"
NC="\033[0m" # No Color

# Verify you are on main
current_branch=$(git rev-parse --abbrev-ref HEAD)
if [ "$current_branch" != "main" ]; then
  echo -e "${RED}‚ùå You must be on 'main' to run this script. Current branch: '$current_branch'${NC}"
  exit 1
fi

# Check for uncommitted changes
if ! git diff-index --quiet HEAD --; then
  echo -e "${RED}‚ùå You have uncommitted changes. Please commit or stash them before running this script.${NC}"
  exit 1
fi

# Run Prettier formatting
echo -e "${YELLOW}‚ú® Running Prettier to format code...${NC}"
npx prettier --write "src/**/*.{js,jsx,ts,tsx,json,css,md}"

# Check if Prettier made changes
if ! git diff-index --quiet HEAD --; then
  git add .
  git commit -m "style: format code with Prettier"
  echo -e "${GREEN}‚úÖ Prettier changes committed.${NC}"
else
  echo -e "${GREEN}‚úÖ Code already formatted.${NC}"
fi

# Run ESLint autofix
echo -e "${YELLOW}üîß Running ESLint autofix...${NC}"
npx eslint --fix "src/**/*.{js,jsx,ts,tsx}"

# Check if ESLint made changes
if ! git diff-index --quiet HEAD --; then
  git add .
  git commit -m "style: auto-fix ESLint issues"
  echo -e "${GREEN}‚úÖ ESLint fixes committed.${NC}"
else
  echo -e "${GREEN}‚úÖ No ESLint fixes needed.${NC}"
fi

# Prompt for the new branch name
echo -e "${YELLOW}üîπ Enter new branch name:${NC}"
read branch

if [ -z "$branch" ]; then
  echo -e "${RED}‚ùå No branch name provided.${NC}"
  exit 1
fi

# Create a new branch from current HEAD
git checkout -b "$branch"

# Push the branch to origin
git push -u origin "$branch"

echo -e "${GREEN}‚úÖ Branch '$branch' created and pushed.${NC}"

# Switch back to main
git checkout main

echo -e "${YELLOW}üîÑ Resetting main to match origin/main...${NC}"

# Fetch and reset main to match remote
git fetch origin
git reset --hard origin/main

echo -e "${GREEN}‚úÖ Main hard reset to match origin/main.${NC}"